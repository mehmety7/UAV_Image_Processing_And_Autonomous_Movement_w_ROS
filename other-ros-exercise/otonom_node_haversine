#!/usr/bin/env python

import rospy
from std_msgs.msg import String, Float64
from mavros_msgs.msg import State, HomePosition
from sensor_msgs.msg import NavSatFix
from from nav_msgs.msg import Odometry
from mavros_msgs.srv import *
from geometry_msgs.msg import Twist, PoseStamped
import time

# ################################################################################################################################################
# -------------------------------------------------------------- GLOBAL DEFINITIONS ---------------------------------------------------
# ################################################################################################################################################

# Publisher and Twist msg
velocity_pub = rospy.Publisher('/mavros/setpoint_velocity/cmd_vel_unstamped', Twist, queue_size=10)
msg = Twist()

pos_pub = rospy.Publisher('/mavros/setpoint_position/local', PoseStamped, queue_size=10)
pos_msg = PoseStamped()

# Currently latitude-longitude-altitude info
lat = 0.0
lon = 0.0
alt = 0.0


# Initial position and altitude info of movement
prev_lat = 0.0
prev_lon = 0.0
prev_alt = 0.0

# Blue and red point position
red_lon = 0.0
red_lat = 0.0
blue_lon = 0.0
blue_lat = 0.0

# States info
okConnected = False
okArmed = False
okGuided = False
okColor = "None"



# ################################################################################################################################################
# -------------------------------------------------------------- STATES INSTRUCTIONS ---------------------------------------------------
# ################################################################################################################################################

def setArm():
  rospy.wait_for_service('/mavros/cmd/arming')
  try:
    armService = rospy.ServiceProxy(
        '/mavros/cmd/arming', mavros_msgs.srv.CommandBool)
    armService(True)
  except rospy.ServiceException as e:
    print ("Service arm call failed: %s" % e)



def setTakeoffMode(alt):
  rospy.wait_for_service('/mavros/cmd/takeoff')
  try:
    takeoffService = rospy.ServiceProxy(
        '/mavros/cmd/takeoff', mavros_msgs.srv.CommandTOL)
    takeoffService(altitude=int(alt), latitude=0,
                   longitude=0, min_pitch=0, yaw=0)
  except rospy.ServiceException as e:
    print ("Service takeoff call failed: %s" % e)



def setLandMode():
  rospy.wait_for_service('/mavros/cmd/land')
  try:
    takeoffService = rospy.ServiceProxy(
        '/mavros/cmd/land', mavros_msgs.srv.CommandTOL)
    takeoffService(altitude=0, latitude=0,
                   longitude=0, min_pitch=0, yaw=0)
  except rospy.ServiceException as e:
    print ("Service takeoff call failed: %s" % e)



def setGuidedMode():
    rospy.wait_for_service('/mavros/set_mode')
    try:
        flightModeService = rospy.ServiceProxy('/mavros/set_mode', mavros_msgs.srv.SetMode)
        #http://wiki.ros.org/mavros/CustomModes for custom modes
        isModeChanged = flightModeService(custom_mode='GUIDED') #return true or false
    except rospy.ServiceException as e:
        print ("service set_mode GUIDED call failed: %s. GUIDED Mode could not be set. Check that GPS is enabled"%e)


# ################################################################################################################################################
# -------------------------------------------------------------- CALLBACK FUNCTIONS ----------------------------------------------------------
# ################################################################################################################################################

def globalPositionCallback(globalPositionCallback):
    global lat
    global lon
    lat = globalPositionCallback.latitude
    lon = globalPositionCallback.longitude

def globalAltitudeCallback(globalAltitudeCB):
	global alt
	alt = globalAltitudeCB.data

def globalStateCallback(globalStateCB):
	global okConnected
	global okArmed
	global okGuided
	okConnected = globalStateCB.connected
	okArmed = globalStateCB.armed
	okGuided = globalStateCB.guided

def imageLocationCallback(imageLocationCallback):
	global data
	data = imageLocationCallback

def saveFindColorPosition(saveFindColorPosition):
	global red_lon
	global red_lat
	global blue_lat
	global blue_lon
	global lat
	global lon
	global okColor

	okColor = saveFindColorPosition.data

	if okColor == "Red":
		red_lon = lon
		red_lat = lat

	if okColor == "Blue":
		blue_lon = lon
		blue_lat = lat



# ################################################################################################################################################
# -------------------------------------------------------------- MOVE ON AXIS ---------------------------------------------------
# ################################################################################################################################################

from decimal import *
from math import cos, sin, asin, sqrt, radians
import math

# degree to radian
def deg2rad(deg):
	return deg * (math.pi/180)

# Haversine formula, use distance of two point that include lat-lon in radian
# It calculates distance of two coordinate points in kmeter

def haversine():
  	global lat
  	global lon
  	global prev_lat
  	global prev_lon

   	# enlem-boylam verilerini radyan cinsinde tutma
   	r_lat, r_lon, r_prev_lat, r_prev_lon = deg2rad(lat), deg2rad(lon), deg2rad(prev_lat), deg2rad(prev_lon)

   	# enlem-boylam verilerinin farki (radyan) 
	diff_lat = abs(r_lat - r_prev_lat) 
	diff_lon = abs(r_lon - r_prev_lon) 

    # haversine formula
	a = sin(diff_lat/2)**2 + cos(r_prev_lat) * cos(r_lat) * sin(diff_lon/2)**2
	c = 2 * asin(sqrt(a)) 

	R = 6371 #radius of earth (km)

	#print(Decimal(c * R * 1000))

	return Decimal(c * R * 1000) # distance in meter




def moveX(dist, speed): #(in meter (float), lineer speed(float))
	global lat
	global lon
	global prev_lat
	global prev_lon

	msg.linear.x = speed # lineer speed on x-axis

	while not rospy.is_shutdown():
		dist_covered = haversine() 
		if dist_covered > dist:
			break

		velocity_pub.publish(msg)

		rate.sleep()

	print("Enlem: {:.7f} ,Boylam: {:.7f}\nAlinan Yol: {:.7f}".format(lat, lon, dist_covered))

	# Dur komutu
	msg.linear.x = 0.
	msg.linear.y = 0.
	msg.linear.z = 0.
	for i in range(100):
		velocity_pub.publish(msg)

	rospy.sleep(1.)

	# after movement, re-assaign initializing position info
	prev_lat = lat
	prev_lon = lon



dist_diff = 0.0

def moveY(dist, speed, round): #(in meter (float), lineer speed(float))
	global lat
	global lon
	global prev_lat
	global prev_lon
	global okColor

	global dist_diff

	msg.linear.y = speed # lineer speed on y-axis

	while not rospy.is_shutdown():
		dist_covered = haversine() 
		if round == 1 and speed < 0:
			print("Havuz bulundu ? {}".format(okColor))
			if okColor == "Red":
				print("Kirmizi boylam: {}, Kirmizi enlem: {} ".format(red_lon,red_lat))
			if okColor == "Blue":
				print("Mavi boylam: {}, Mavi enlem: {} ".format(blue_lon,blue_lat))

		if round == 2 and speed < 0:
			if abs(red_lon - lon) < 0.1 and abs(red_lat - lat) < 0.1:
				dist_diff = dist - dist_covered
				break
			if abs(blue_lon - lon) < 0.1 and abs(blue_lat - lat) < 0.1:
				dist_diff = dist - dist_covered
				break
		if dist_covered > dist:
			break

		velocity_pub.publish(msg)
		rate.sleep()

	print("Enlem: {:.7f} ,Boylam: {:.7f}\nAlinan Yol: {:.7f}".format(lat, lon, dist_covered))

	# Dur komutu
	msg.linear.x = 0.
	msg.linear.y = 0.
	msg.linear.z = 0.
	
	for i in range(100):
		velocity_pub.publish(msg)

	rospy.sleep(1.)

	# after movement, re-assaign initializing position info
	prev_lat = lat
	prev_lon = lon



def moveZ(dist, speed): #(in meter (float), lineer speed(float))
	global alt
	global prev_alt

	msg.linear.z = speed # lineer speed on z-axis

	while not rospy.is_shutdown(): 
		if speed > 0 and alt > dist + prev_alt:
			break
		if speed < 0 and alt < prev_alt - dist:
			break

		velocity_pub.publish(msg)

		rate.sleep()

	print("Ilk iritifa: {:.7f} ,Anlik irtifa: {:.7f}\n, Fark: {:.7f}".format(prev_alt, alt, alt - prev_alt))

	# Dur komutu
	msg.linear.x = 0.
	msg.linear.y = 0.
	msg.linear.z = 0.
	for i in range(100):
		velocity_pub.publish(msg)


	rospy.sleep(1.)

	# after movement, re-assaign initializing position info
	prev_alt = alt

def turnLeft(angle_deg, clockwise = False):

	speed_r = 0.405

	angle_r = deg2rad(angle_deg)

	if clockwise:
		msg.angular.z = -abs(speed_r)
		msg.angular.x = 0
		msg.angular.y = 0
	else:
		msg.angular.z = abs(speed_r)
		msg.angular.x = 0
		msg.angular.y = 0

	
	t0 = rospy.Time.now().secs

	current_angle = 0

	while(current_angle < angle_r):

		velocity_pub.publish(msg)

		t1 = rospy.Time.now().secs

		current_angle = speed_r * (t1 - t0)

		rate.sleep()

	msg.linear.x = 0.
	msg.linear.z = 0.
	msg.linear.y = 0.
	msg.angular.z = 0.

	for i in range(50):
		velocity_pub.publish(msg)

	rospy.sleep(1.)



# ################################################################################################################################################
# -------------------------------------------------------------- TESTS ---------------------------------------------------
# ################################################################################################################################################

def mission():

	moveY(5,5, 1)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveX(10,-5)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveY(10,-1,1)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveX(10,5)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)

	moveY(5,10, 2)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveX(10,-5)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveY(10,-1,2)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveX(10,5)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveY(5,10,2)
	rospy.sleep(1.)

def mission2():

	global dist_diff

	moveY(60,5, 1)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveX(30,-5)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveY(120,-2,1)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveX(30,5)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)

	moveY(120,10, 2)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveX(30,-5)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)

	moveY(120,-2,2)
	rospy.sleep(.1)
	
	if dist_diff != 0.0:
		moveZ(3,-1)
		rospy.sleep(3)
		moveZ(3,1)
		rospy.sleep(1.)
		moveY(dist_diff, -1, 2)
		rospy.sleep(.1)
		dist_diff = 0.0
 	
 	'''
 	if dist_diff != 0.0:
 		moveZ(3,-1)
		rospy.sleep(3)
		moveZ(3,1)
		rospy.sleep(.1)
		moveY(dist_diff, -1, 2)
		rospy.sleep(.1)
		dist_diff = 0.0
	'''

	turnLeft(90)
	rospy.sleep(1.)
	moveX(10,5)
	rospy.sleep(1.)
	turnLeft(90)
	rospy.sleep(1.)
	moveY(5,10,2)
	rospy.sleep(1.)

def mission2_noTurn():

	global dist_diff

	moveY(60,5, 1)
	rospy.sleep(1.)
	moveX(30,-5)
	rospy.sleep(1.)
	moveY(120,-2,1)
	rospy.sleep(1.)
	moveX(30,5)
	rospy.sleep(1.)

	moveY(120,10, 2)
	rospy.sleep(1.)
	moveX(30,-5)
	rospy.sleep(1.)

	moveY(120,-2,2)
	rospy.sleep(.1)
	
	if dist_diff != 0.0:
		moveZ(3,-1)
		rospy.sleep(3)
		moveZ(3,1)
		rospy.sleep(1.)
		moveY(dist_diff, -1, 2)
		rospy.sleep(.1)
		dist_diff = 0.0
 	
 	'''
 	if dist_diff != 0.0:
 		moveZ(3,-1)
		rospy.sleep(3)
		moveZ(3,1)
		rospy.sleep(.1)
		moveY(dist_diff, -1, 2)
		rospy.sleep(.1)
		dist_diff = 0.0
	'''

	rospy.sleep(1.)
	moveX(10,5)
	rospy.sleep(1.)
	moveY(5,10,2)
	rospy.sleep(1.)




if __name__ == '__main__':

	rospy.init_node('otonom_node', anonymous=True)
	rate = rospy.Rate(10)
	rospy.Subscriber("/mavros/global_position/raw/fix", NavSatFix, globalPositionCallback)
	rospy.Subscriber("mavros/global_position/rel_alt", Float64, globalAltitudeCallback)
	rospy.Subscriber("mavros/state", State, globalStateCallback)
	rospy.Subscriber("/is_find_color", String, saveFindColorPosition)


	# Conecting check
	while not okConnected:
		rospy.sleep(1.)

	# Guided check
	setGuidedMode()
	while not okGuided:
		rospy.sleep(.5)
		setGuidedMode()

	print("Is Drone Guided:{}".format(okGuided))

	# Armed check
	setArm()
	while not okArmed:
		rospy.sleep(.5)
		setArm()

	print("Drone Arm Status:{}".format(okArmed))

	# Altitude check
	setTakeoffMode(6)
	while alt < 5.8:
		rospy.sleep(.5)

	# Initialize of first position info before movement
	prev_lat = lat
	prev_lon = lon
	prev_alt = alt

	# Publish
	for i in range(15):
		velocity_pub.publish(msg)

	mission()

	rospy.sleep(3.)

	setLandMode()
